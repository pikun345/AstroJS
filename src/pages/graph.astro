---
import client from '../typescript/backend/apolloConn';
import '../styles/zeta.css';
import {gql} from "../../node_modules/@apollo/client/index"
const GET_DATA = gql `query Posts($limit: Int!){
    posts(first: $limit){
      
      nodes{
        id
    title
    slug
    date
    uri
    excerpt
    commentStatus
    categories {
      nodes {
        id
        name
        uri
        slug
      }
    }
    tags {
      nodes {
        id
        name
        uri
        slug
        count
      }
    }
    author {
      node {
        id
        name
        firstName
        lastName
        uri
        avatar {
          url
        }
        seo {
          title
          description
          canonicalUrl
          focusKeywords
        }
      }
    }
    content(format: RENDERED)
    nextPost {
      uri
      title
    }
    previousPost {
      uri
      title
    }
    featuredImage {
      node {
        altText
        sourceUrl
        srcSet
        mediaItemUrl
        mediaDetails {
          sizes {
            name
            sourceUrl
            width
            height
            mimeType
          }
        }
      }
    }
    seo {
      title
      description
      canonicalUrl
      focusKeywords
      openGraph {
        url
        title
        siteName
        description
        image {
          secureUrl
          url
          width
          type
          height
        }
        locale
        type
      }
      jsonLd {
        raw
      }
     }

    }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
 `;

 const limit = 2;
let data = { posts: { nodes: [], pageInfo: { hasNextPage: false } } };//set every value to null and false initially
let afterCursor = null;// used to define if any qury exist or not 

// let data :any= null;
async function fetchData() {
try  
{    
        const response = await client.query({ query: GET_DATA,  variables: { limit ,after: afterCursor} });  
     // const response = await client.query({ query: GET_DATA,  variables: { limit } }); 
     data = response.data; 
     
     console.log("mo data=",data.posts)
}
catch(error) 
{
     console.error("Error fetching GraphQL data:", error); 
}
}

await fetchData();

async function loadMore() {
  if (data.posts.pageInfo.hasNextPage) {
    afterCursor = data.posts.pageInfo.endCursor;
    await fetchData();
  }
}

---

<html>
  <body>
    
    <div id="container">
      {data.posts.nodes.map((blogItem) => (
        
        <p>1 {blogItem.id} </p>
        <p>2{blogItem.title}</p>
        <p>3{blogItem.slug}</p>
        <p>4{blogItem.date}</p>
        <p>5{blogItem.uri}</p>
        <p>6{blogItem.author.node.avatar.url}</p>
        <p>7{blogItem.seo.openGraph.type}</p>
        <p>auth id={blogItem.author.node.id}</p>
        <p>77{blogItem.seo.description}</p>

        
     
        <br>
        
      ))}
    </div>

   
       <button id="loadBttn">Load More</button>
      
      
      

  </body>
</html>
        
<script>

  const loadButton = document.getElementById("loadBttn");
  loadButton.addEventListener("click",async()=>(
    await loadMore();
  ))
  

</script>
  
  

 
  
      
  